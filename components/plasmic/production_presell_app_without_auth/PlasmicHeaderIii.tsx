// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9KtuS1ThjHB8cDkxUpF5Nn
// Component: 73ytoLze7Vpt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TokensRemaining from "../../TokensRemaining"; // plasmic-import: Ui49-IDzPUFa/component

import { useScreenVariants as useScreenVariantsuDnw8Kkoe0Y9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uDnw8KKOE0Y9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic_production_presell_app_without_auth.module.css"; // plasmic-import: 9KtuS1ThjHB8cDkxUpF5Nn/projectcss
import sty from "./PlasmicHeaderIii.module.css"; // plasmic-import: 73ytoLze7Vpt/css

createPlasmicElementProxy;

export type PlasmicHeaderIii__VariantMembers = {};
export type PlasmicHeaderIii__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderIii__VariantsArgs;
export const PlasmicHeaderIii__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderIii__ArgsType = {};
type ArgPropType = keyof PlasmicHeaderIii__ArgsType;
export const PlasmicHeaderIii__ArgProps = new Array<ArgPropType>();

export type PlasmicHeaderIii__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHeaderIiiProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeaderIii__RenderFunc(props: {
  variants: PlasmicHeaderIii__VariantsArgs;
  args: PlasmicHeaderIii__ArgsType;
  overrides: PlasmicHeaderIii__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuDnw8Kkoe0Y9()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__uZ5Iw)}>
        <div className={classNames(projectcss.all, sty.freeBox__zArOw)}>
          <div className={classNames(projectcss.all, sty.freeBox__bkok)}>
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              platform={"nextjs"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__iQId6)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "40px"
                    : "80px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/production_presell_app_without_auth/images/presellIconLightsvg.svg",
                  fullWidth: 166,
                  fullHeight: 150,
                  aspectRatio: 1.109215
                }}
              />
            </PlasmicLink__>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__w8QCn)}>
          <div className={classNames(projectcss.all, sty.freeBox__sfCmT)}>
            <TokensRemaining
              className={classNames(
                "__wab_instance",
                sty.tokensRemaining___57KVm
              )}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__iw1Lf)}>
          <div className={classNames(projectcss.all, sty.freeBox__iIia)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ulGxn)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "30px"
                  : "40px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/production_presell_app_without_auth/images/expandToolssvg.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__ia2Eo)}>
        <TokensRemaining
          className={classNames("__wab_instance", sty.tokensRemaining__gBrJp)}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderIii__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderIii__VariantsArgs;
    args?: PlasmicHeaderIii__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderIii__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeaderIii__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderIii__ArgProps,
          internalVariantPropNames: PlasmicHeaderIii__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderIii__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderIii";
  } else {
    func.displayName = `PlasmicHeaderIii.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderIii = Object.assign(
  // Top-level PlasmicHeaderIii renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHeaderIii
    internalVariantProps: PlasmicHeaderIii__VariantProps,
    internalArgProps: PlasmicHeaderIii__ArgProps
  }
);

export default PlasmicHeaderIii;
/* prettier-ignore-end */
