// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9KtuS1ThjHB8cDkxUpF5Nn
// Component: C5JUwbZPJCP-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: 5RnRMWLMy77V/component
import HiddenTextInputEmail from "../../HiddenTextInputEmail"; // plasmic-import: 2kHVHFsuX1xh/component
import SubmitButton from "../../SubmitButton"; // plasmic-import: TkJnt-bFFGLH/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic_production_presell_app_without_auth.module.css"; // plasmic-import: 9KtuS1ThjHB8cDkxUpF5Nn/projectcss
import sty from "./PlasmicEmailNotFound.module.css"; // plasmic-import: C5JUwbZPJCP-/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: _92Mwm5nMC6O/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: suacpCjRChpY/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: M3CUag-H_ns7/icon

createPlasmicElementProxy;

export type PlasmicEmailNotFound__VariantMembers = {
  tryAgain: "tryAgain";
};
export type PlasmicEmailNotFound__VariantsArgs = {
  tryAgain?: SingleBooleanChoiceArg<"tryAgain">;
};
type VariantPropType = keyof PlasmicEmailNotFound__VariantsArgs;
export const PlasmicEmailNotFound__VariantProps = new Array<VariantPropType>(
  "tryAgain"
);

export type PlasmicEmailNotFound__ArgsType = {};
type ArgPropType = keyof PlasmicEmailNotFound__ArgsType;
export const PlasmicEmailNotFound__ArgProps = new Array<ArgPropType>();

export type PlasmicEmailNotFound__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  form2?: Flex__<"form">;
  textInput2?: Flex__<typeof TextInput>;
  hiddenTextInputEmail?: Flex__<typeof HiddenTextInputEmail>;
  embedHtml?: Flex__<typeof Embed>;
  form3?: Flex__<"form">;
  textInput3?: Flex__<typeof TextInput>;
};

export interface DefaultEmailNotFoundProps {
  tryAgain?: SingleBooleanChoiceArg<"tryAgain">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEmailNotFound__RenderFunc(props: {
  variants: PlasmicEmailNotFound__VariantsArgs;
  args: PlasmicEmailNotFound__ArgsType;
  overrides: PlasmicEmailNotFound__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "tryAgain",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.tryAgain
      },
      {
        path: "hiddenTextInputEmail.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root,
        { [sty.roottryAgain]: hasVariant($state, "tryAgain", "tryAgain") }
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"40px"}
        loading={"lazy"}
        src={{
          src: "/plasmic/production_presell_app_without_auth/images/magicWandsvg2.svg",
          fullWidth: 150,
          fullHeight: 150,
          aspectRatio: 1
        }}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___0HBTj
        )}
      >
        {"Email Not Found"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__gTl08
        )}
      >
        {"Try Again or Create Account"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__izJfW
        )}
      >
        {"OR"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__pwcD9
        )}
      >
        {""}
      </div>
      <form
        data-plasmic-name={"form2"}
        data-plasmic-override={overrides.form2}
        Action={"https://hook.us1.make.com/xd91j9vmu96cgft3bkn4isbu1b6btl1g"}
        Method={"post"}
        className={classNames(projectcss.all, sty.form2, {
          [sty.form2tryAgain]: hasVariant($state, "tryAgain", "tryAgain")
        })}
      >
        <TextInput
          data-plasmic-name={"textInput2"}
          data-plasmic-override={overrides.textInput2}
          className={classNames("__wab_instance", sty.textInput2)}
          name={"email"}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["textInput2", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          placeholder={"Your Email Address"}
          type={"email"}
          value={generateStateValueProp($state, ["textInput2", "value"]) ?? ""}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__wMPvh)}
          id={"hiddenField"}
        >
          <HiddenTextInputEmail
            data-plasmic-name={"hiddenTextInputEmail"}
            data-plasmic-override={overrides.hiddenTextInputEmail}
            className={classNames("__wab_instance", sty.hiddenTextInputEmail)}
            name={"create_email"}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, [
                "hiddenTextInputEmail",
                "value"
              ])((e => e.target?.value).apply(null, eventArgs));
            }}
            type={"text"}
            value={
              generateStateValueProp($state, [
                "hiddenTextInputEmail",
                "value"
              ]) ?? ""
            }
          />
        </div>
        <SubmitButton
          className={classNames("__wab_instance", sty.submitButton__i1Lt8)}
          submitsForm={true}
        >
          {"Create New Account"}
        </SubmitButton>
        <Embed
          data-plasmic-name={"embedHtml"}
          data-plasmic-override={overrides.embedHtml}
          className={classNames("__wab_instance", sty.embedHtml)}
          code={
            "<script async>\nfunction getUrlParameter(name) {\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    var results = regex.exec(location.search);\n    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    console.log('DOMContentLoaded event fired');\n    \n    const emailValue = getUrlParameter('email');\n    console.log('emailValue:', emailValue);\n\n    const hiddenEmailField = document.getElementById('create_email_hidden');\n    console.log('hiddenEmailField:', hiddenEmailField);\n\n    // Set the value of the hidden input field regardless of other form fields\n    if (hiddenEmailField) {\n        hiddenEmailField.value = emailValue;\n        hiddenEmailField.setAttribute(\"value\", emailValue);\n        sessionStorage.setItem('email', emailValue);\n        console.log('Hidden email field value set:', emailValue);\n    }\n    \n    // Prevent form submission until script has executed\n    const form = document.querySelector('#form'); // Replace with your form container's ID\n    if (form) {\n        form.addEventListener('submit', function(event) {\n            event.preventDefault();\n            console.log('Form submission prevented');\n            // Perform any additional validation or actions here\n            form.submit(); // Resubmit the form after the script has executed\n        });\n    }\n});\n\n// Set the hidden input field's value using setTimeout with a delay of 500 milliseconds\nsetTimeout(function() {\n    console.log('setTimeout event fired');\n\n    const emailValue = getUrlParameter('email');\n    console.log('emailValue:', emailValue);\n\n    const hiddenEmailField = document.getElementById('create_email_hidden');\n    console.log('hiddenEmailField:', hiddenEmailField);\n\n    if (hiddenEmailField) {\n        hiddenEmailField.value = emailValue;\n        hiddenEmailField.setAttribute(\"value\", emailValue);\n        sessionStorage.setItem('email', emailValue);\n        console.log('Hidden email field value set:', emailValue);\n    }\n}, 500); // Adjusted delay to 500 milliseconds\n</script>\n"
          }
        />
      </form>
      <form
        data-plasmic-name={"form3"}
        data-plasmic-override={overrides.form3}
        Action={"https://hook.us1.make.com/xd91j9vmu96cgft3bkn4isbu1b6btl1g"}
        Method={"post"}
        className={classNames(projectcss.all, sty.form3, {
          [sty.form3tryAgain]: hasVariant($state, "tryAgain", "tryAgain")
        })}
      >
        <TextInput
          data-plasmic-name={"textInput3"}
          data-plasmic-override={overrides.textInput3}
          className={classNames("__wab_instance", sty.textInput3)}
          name={"email"}
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["textInput3", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          placeholder={"Your Email Address"}
          type={"email"}
          value={generateStateValueProp($state, ["textInput3", "value"]) ?? ""}
        />

        <SubmitButton
          className={classNames("__wab_instance", sty.submitButton__osA5P)}
          submitsForm={true}
        >
          {"Submit"}
        </SubmitButton>
      </form>
      <div
        className={classNames(projectcss.all, sty.freeBox__opO2H, {
          [sty.freeBoxtryAgain__opO2HrpKxJ]: hasVariant(
            $state,
            "tryAgain",
            "tryAgain"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateTryAgain"] = true
            ? (() => {
                const actionArgs = { vgroup: "tryAgain", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateTryAgain"] != null &&
            typeof $steps["updateTryAgain"] === "object" &&
            typeof $steps["updateTryAgain"].then === "function"
          ) {
            $steps["updateTryAgain"] = await $steps["updateTryAgain"];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tHa4
          )}
        >
          {"Try Again"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "form2",
    "textInput2",
    "hiddenTextInputEmail",
    "embedHtml",
    "form3",
    "textInput3"
  ],
  img: ["img"],
  form2: ["form2", "textInput2", "hiddenTextInputEmail", "embedHtml"],
  textInput2: ["textInput2"],
  hiddenTextInputEmail: ["hiddenTextInputEmail"],
  embedHtml: ["embedHtml"],
  form3: ["form3", "textInput3"],
  textInput3: ["textInput3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  form2: "form";
  textInput2: typeof TextInput;
  hiddenTextInputEmail: typeof HiddenTextInputEmail;
  embedHtml: typeof Embed;
  form3: "form";
  textInput3: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEmailNotFound__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEmailNotFound__VariantsArgs;
    args?: PlasmicEmailNotFound__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEmailNotFound__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEmailNotFound__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEmailNotFound__ArgProps,
          internalVariantPropNames: PlasmicEmailNotFound__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEmailNotFound__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmailNotFound";
  } else {
    func.displayName = `PlasmicEmailNotFound.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailNotFound = Object.assign(
  // Top-level PlasmicEmailNotFound renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    form2: makeNodeComponent("form2"),
    textInput2: makeNodeComponent("textInput2"),
    hiddenTextInputEmail: makeNodeComponent("hiddenTextInputEmail"),
    embedHtml: makeNodeComponent("embedHtml"),
    form3: makeNodeComponent("form3"),
    textInput3: makeNodeComponent("textInput3"),

    // Metadata about props expected for PlasmicEmailNotFound
    internalVariantProps: PlasmicEmailNotFound__VariantProps,
    internalArgProps: PlasmicEmailNotFound__ArgProps
  }
);

export default PlasmicEmailNotFound;
/* prettier-ignore-end */
