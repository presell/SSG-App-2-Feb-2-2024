// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9KtuS1ThjHB8cDkxUpF5Nn
// Component: Ui49-IDzPUFa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsuDnw8Kkoe0Y9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uDnw8KKOE0Y9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic_production_presell_app_without_auth.module.css"; // plasmic-import: 9KtuS1ThjHB8cDkxUpF5Nn/projectcss
import sty from "./PlasmicTokensRemaining.module.css"; // plasmic-import: Ui49-IDzPUFa/css

createPlasmicElementProxy;

export type PlasmicTokensRemaining__VariantMembers = {
  _2TokensRemaining: "_2TokensRemaining";
  _1TokenRemaining: "_1TokenRemaining";
  _0TokensRemaining: "_0TokensRemaining";
};
export type PlasmicTokensRemaining__VariantsArgs = {
  _2TokensRemaining?: SingleBooleanChoiceArg<"_2TokensRemaining">;
  _1TokenRemaining?: SingleBooleanChoiceArg<"_1TokenRemaining">;
  _0TokensRemaining?: SingleBooleanChoiceArg<"_0TokensRemaining">;
};
type VariantPropType = keyof PlasmicTokensRemaining__VariantsArgs;
export const PlasmicTokensRemaining__VariantProps = new Array<VariantPropType>(
  "_2TokensRemaining",
  "_1TokenRemaining",
  "_0TokensRemaining"
);

export type PlasmicTokensRemaining__ArgsType = {};
type ArgPropType = keyof PlasmicTokensRemaining__ArgsType;
export const PlasmicTokensRemaining__ArgProps = new Array<ArgPropType>();

export type PlasmicTokensRemaining__OverridesType = {
  root?: Flex__<"div">;
  _1?: Flex__<"div">;
};

export interface DefaultTokensRemainingProps {
  _2TokensRemaining?: SingleBooleanChoiceArg<"_2TokensRemaining">;
  _1TokenRemaining?: SingleBooleanChoiceArg<"_1TokenRemaining">;
  _0TokensRemaining?: SingleBooleanChoiceArg<"_0TokensRemaining">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTokensRemaining__RenderFunc(props: {
  variants: PlasmicTokensRemaining__VariantsArgs;
  args: PlasmicTokensRemaining__ArgsType;
  overrides: PlasmicTokensRemaining__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "_2TokensRemaining",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props._2TokensRemaining
      },
      {
        path: "_1TokenRemaining",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props._1TokenRemaining
      },
      {
        path: "_0TokensRemaining",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props._0TokensRemaining
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
        opId: "8b7d3198-c040-493c-a758-47945c25fa3a",
        userArgs: {},
        cacheKey: `plasmic.$.8b7d3198-c040-493c-a758-47945c25fa3a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuDnw8Kkoe0Y9()
  });

  return (
    (() => {
      try {
        return true;
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          plasmic_legacy_feed_page_designs_css.plasmic_tokens,
          sty.root,
          {
            [sty.root_2TokensRemaining]: hasVariant(
              $state,
              "_2TokensRemaining",
              "_2TokensRemaining"
            )
          }
        )}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__gUsxv, {
            [sty.freeBox_2TokensRemaining__gUsxvyZ4U8]: hasVariant(
              $state,
              "_2TokensRemaining",
              "_2TokensRemaining"
            )
          })}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__hocTq, {
              [sty.img_2TokensRemaining__hocTQyZ4U8]: hasVariant(
                $state,
                "_2TokensRemaining",
                "_2TokensRemaining"
              )
            })}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant($state, "_2TokensRemaining", "_2TokensRemaining")
                ? "30px"
                : "30px"
            }
            loading={"lazy"}
            src={{
              src: "/plasmic/production_presell_app_without_auth/images/tokenImagepng.png",
              fullWidth: 1592,
              fullHeight: 1648,
              aspectRatio: undefined
            }}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__chaN6, {
            [sty.freeBox_0TokensRemaining__chaN68Q1U1]: hasVariant(
              $state,
              "_0TokensRemaining",
              "_0TokensRemaining"
            ),
            [sty.freeBox_2TokensRemaining__chaN6YZ4U8]: hasVariant(
              $state,
              "_2TokensRemaining",
              "_2TokensRemaining"
            )
          })}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__vMpFs, {
              [sty.img_2TokensRemaining__vMpFSyZ4U8]: hasVariant(
                $state,
                "_2TokensRemaining",
                "_2TokensRemaining"
              )
            })}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant($state, "_2TokensRemaining", "_2TokensRemaining")
                ? "30px"
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? "15px"
                : "30px"
            }
            loading={"lazy"}
            src={{
              src: "/plasmic/production_presell_app_without_auth/images/tokenImagepng.png",
              fullWidth: 1592,
              fullHeight: 1648,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t2TiU,
              {
                [sty.text_2TokensRemaining__t2TiUyZ4U8]: hasVariant(
                  $state,
                  "_2TokensRemaining",
                  "_2TokensRemaining"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.query.data[0].tokens_remaining;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "-";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__azFr7,
              {
                [sty.text_2TokensRemaining__azFr7YZ4U8]: hasVariant(
                  $state,
                  "_2TokensRemaining",
                  "_2TokensRemaining"
                )
              }
            )}
          >
            {"Tokens Remaining"}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__oOnLf, {
              [sty.freeBox_2TokensRemaining__oOnLFyZ4U8]: hasVariant(
                $state,
                "_2TokensRemaining",
                "_2TokensRemaining"
              )
            })}
          >
            <div
              data-plasmic-name={"_1"}
              data-plasmic-override={overrides._1}
              className={classNames(projectcss.all, sty._1, {
                [sty._1_0TokensRemaining]: hasVariant(
                  $state,
                  "_0TokensRemaining",
                  "_0TokensRemaining"
                ),
                [sty._1_1TokenRemaining]: hasVariant(
                  $state,
                  "_1TokenRemaining",
                  "_1TokenRemaining"
                ),
                [sty._1_2TokensRemaining]: hasVariant(
                  $state,
                  "_2TokensRemaining",
                  "_2TokensRemaining"
                )
              })}
            />
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "_1"],
  _1: ["_1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  _1: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTokensRemaining__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTokensRemaining__VariantsArgs;
    args?: PlasmicTokensRemaining__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTokensRemaining__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTokensRemaining__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTokensRemaining__ArgProps,
          internalVariantPropNames: PlasmicTokensRemaining__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTokensRemaining__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTokensRemaining";
  } else {
    func.displayName = `PlasmicTokensRemaining.${nodeName}`;
  }
  return func;
}

export const PlasmicTokensRemaining = Object.assign(
  // Top-level PlasmicTokensRemaining renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _1: makeNodeComponent("_1"),

    // Metadata about props expected for PlasmicTokensRemaining
    internalVariantProps: PlasmicTokensRemaining__VariantProps,
    internalArgProps: PlasmicTokensRemaining__ArgProps
  }
);

export default PlasmicTokensRemaining;
/* prettier-ignore-end */
