// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9KtuS1ThjHB8cDkxUpF5Nn
// Component: Aah4CGf3RvZL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Editable from "../../Editable"; // plasmic-import: jko7g0l6GA9g/component
import TextInput from "../../TextInput"; // plasmic-import: 5RnRMWLMy77V/component
import LearnMoreButton from "../../LearnMoreButton"; // plasmic-import: BZFgfdM3hCN6/component

import { useScreenVariants as useScreenVariantsuDnw8Kkoe0Y9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uDnw8KKOE0Y9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic_production_presell_app_without_auth.module.css"; // plasmic-import: 9KtuS1ThjHB8cDkxUpF5Nn/projectcss
import sty from "./PlasmicAd2.module.css"; // plasmic-import: Aah4CGf3RvZL/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: suacpCjRChpY/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: M3CUag-H_ns7/icon

createPlasmicElementProxy;

export type PlasmicAd2__VariantMembers = {};
export type PlasmicAd2__VariantsArgs = {};
type VariantPropType = keyof PlasmicAd2__VariantsArgs;
export const PlasmicAd2__VariantProps = new Array<VariantPropType>();

export type PlasmicAd2__ArgsType = {};
type ArgPropType = keyof PlasmicAd2__ArgsType;
export const PlasmicAd2__ArgProps = new Array<ArgPropType>();

export type PlasmicAd2__OverridesType = {
  ad?: Flex__<"div">;
  brand?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  editable?: Flex__<typeof Editable>;
  edit?: Flex__<typeof TextInput>;
  body?: Flex__<"div">;
  creative?: Flex__<typeof PlasmicImg__>;
  learnMoreButton?: Flex__<typeof LearnMoreButton>;
};

export interface DefaultAd2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAd2__RenderFunc(props: {
  variants: PlasmicAd2__VariantsArgs;
  args: PlasmicAd2__ArgsType;
  overrides: PlasmicAd2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "edit.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "brandName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adBody1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adBody2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adBody3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adBody4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adCreative",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adHeadline",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adDescription",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuDnw8Kkoe0Y9()
  });

  return (
    <div
      data-plasmic-name={"ad"}
      data-plasmic-override={overrides.ad}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.ad
      )}
    >
      <div
        data-plasmic-name={"brand"}
        data-plasmic-override={overrides.brand}
        className={classNames(projectcss.all, sty.brand)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"2rem"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "2rem" : "2rem"
          }
          loading={"lazy"}
          src={(() => {
            try {
              return $props.currentModel.data[0].brand_icon_light;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  src: "/plasmic/production_presell_app_without_auth/images/presellSocialIconpng.png",
                  fullWidth: 250,
                  fullHeight: 250,
                  aspectRatio: undefined
                };
              }
              throw e;
            }
          })()}
        />

        <Editable
          data-plasmic-name={"editable"}
          data-plasmic-override={overrides.editable}
          className={classNames("__wab_instance", sty.editable)}
          edit2={
            <TextInput
              data-plasmic-name={"edit"}
              data-plasmic-override={overrides.edit}
              className={classNames("__wab_instance", sty.edit)}
              endIcon={null}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["edit", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              startIcon={null}
              value={generateStateValueProp($state, ["edit", "value"]) ?? ""}
            />
          }
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yqdFn
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props?.currentModel?.brand_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Blank";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Editable>
      </div>
      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oek6P
          )}
        >
          {""}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ulLKa
          )}
        >
          {""}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3NmK
          )}
        >
          {""}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rv3P
          )}
        >
          {""}
        </div>
      </div>
      <PlasmicImg__
        data-plasmic-name={"creative"}
        data-plasmic-override={overrides.creative}
        alt={""}
        className={classNames(sty.creative)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
        }
        loading={"lazy"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__wkrsx)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gutNc
          )}
        >
          {""}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3QMsQ
          )}
        >
          {""}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__gBiDw)}>
        <LearnMoreButton
          data-plasmic-name={"learnMoreButton"}
          data-plasmic-override={overrides.learnMoreButton}
          className={classNames("__wab_instance", sty.learnMoreButton)}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ad: [
    "ad",
    "brand",
    "img",
    "editable",
    "edit",
    "body",
    "creative",
    "learnMoreButton"
  ],
  brand: ["brand", "img", "editable", "edit"],
  img: ["img"],
  editable: ["editable", "edit"],
  edit: ["edit"],
  body: ["body"],
  creative: ["creative"],
  learnMoreButton: ["learnMoreButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ad: "div";
  brand: "div";
  img: typeof PlasmicImg__;
  editable: typeof Editable;
  edit: typeof TextInput;
  body: "div";
  creative: typeof PlasmicImg__;
  learnMoreButton: typeof LearnMoreButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAd2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAd2__VariantsArgs;
    args?: PlasmicAd2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAd2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAd2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAd2__ArgProps,
          internalVariantPropNames: PlasmicAd2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAd2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ad") {
    func.displayName = "PlasmicAd2";
  } else {
    func.displayName = `PlasmicAd2.${nodeName}`;
  }
  return func;
}

export const PlasmicAd2 = Object.assign(
  // Top-level PlasmicAd2 renders the root element
  makeNodeComponent("ad"),
  {
    // Helper components rendering sub-elements
    brand: makeNodeComponent("brand"),
    img: makeNodeComponent("img"),
    editable: makeNodeComponent("editable"),
    edit: makeNodeComponent("edit"),
    body: makeNodeComponent("body"),
    creative: makeNodeComponent("creative"),
    learnMoreButton: makeNodeComponent("learnMoreButton"),

    // Metadata about props expected for PlasmicAd2
    internalVariantProps: PlasmicAd2__VariantProps,
    internalArgProps: PlasmicAd2__ArgProps
  }
);

export default PlasmicAd2;
/* prettier-ignore-end */
