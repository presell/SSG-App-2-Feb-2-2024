// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9KtuS1ThjHB8cDkxUpF5Nn
// Component: OY7qEi8woy_z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Editable from "../../Editable"; // plasmic-import: jko7g0l6GA9g/component
import TextInput from "../../TextInput"; // plasmic-import: 5RnRMWLMy77V/component
import LearnMoreButton from "../../LearnMoreButton"; // plasmic-import: BZFgfdM3hCN6/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsuDnw8Kkoe0Y9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uDnw8KKOE0Y9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic_production_presell_app_without_auth.module.css"; // plasmic-import: 9KtuS1ThjHB8cDkxUpF5Nn/projectcss
import sty from "./PlasmicAd.module.css"; // plasmic-import: OY7qEi8woy_z/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: suacpCjRChpY/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: M3CUag-H_ns7/icon

createPlasmicElementProxy;

export type PlasmicAd__VariantMembers = {};
export type PlasmicAd__VariantsArgs = {};
type VariantPropType = keyof PlasmicAd__VariantsArgs;
export const PlasmicAd__VariantProps = new Array<VariantPropType>();

export type PlasmicAd__ArgsType = {
  currentModel?: any;
  editable?: string;
  adId?: number;
  onEdit?: (adId: number) => void;
};
type ArgPropType = keyof PlasmicAd__ArgsType;
export const PlasmicAd__ArgProps = new Array<ArgPropType>(
  "currentModel",
  "editable",
  "adId",
  "onEdit"
);

export type PlasmicAd__OverridesType = {
  ad?: Flex__<"div">;
  brand?: Flex__<"div">;
  edit?: Flex__<typeof TextInput>;
  body?: Flex__<"div">;
  editAdBody1?: Flex__<typeof TextInput>;
  editAdBody2?: Flex__<typeof TextInput>;
  editAdBody3?: Flex__<typeof TextInput>;
  editAdBody4?: Flex__<typeof TextInput>;
  creative?: Flex__<typeof PlasmicImg__>;
  editAdCreative?: Flex__<typeof TextInput>;
  editAdHeadline?: Flex__<typeof TextInput>;
  editAdDescription?: Flex__<typeof TextInput>;
  learnMoreButton?: Flex__<typeof LearnMoreButton>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultAdProps {
  currentModel?: any;
  editable?: string;
  adId?: number;
  onEdit?: (adId: number) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAd__RenderFunc(props: {
  variants: PlasmicAd__VariantsArgs;
  args: PlasmicAd__ArgsType;
  overrides: PlasmicAd__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          currentModel: {
            id: "5",
            created_at: "2023-08-30T15:40:49.989Z",
            visits: "0",
            leads: null,
            spend: null,
            persona_who: "Elderly individuals with weakened joints",
            persona_problem: "Aging skin, weak joints, brittle nails",
            persona_solution:
              "Naturally restores youthfulness, strengthens body",
            page1_preview: "https://i.ibb.co/fXDQGyt/Loading-Article.gif",
            page1_url: null,
            page1_editor: null,
            page2_preview: "https://i.ibb.co/fXDQGyt/Loading-Article.gif",
            page2_url: null,
            page2_editor: null,
            ad1_cta: "Learn More",
            ad1_headline: "Old Age Bully Bashed by Amazing Discovery!",
            ad1_newsfeed:
              "Unleash the Fountain of Youth! \ud83d\udcaa Stronger Body in Days! \ud83d\udc75\u2192\ud83d\udc69 Roll Back the Years! \ud83d\udc85 Say Bye to Brittle Nails!",
            ad1_creative: "https://i.ibb.co/fXDQGyt/Loading-Article.gif",
            ad2_cta: null,
            ad2_headline: null,
            ad2_newsfeed: null,
            ad2_creative: null,
            email: "newuser@example.com",
            product_id: "28",
            product_name: "Collagen Supplement",
            product_thumbnail: "https://i.ibb.co/fXDQGyt/Loading-Article.gif",
            user_uid: "3816ca15-a8d7-4928-af00-1f7f5379abfa",
            brand_id: "1",
            brand_name: "Unknown Brand",
            brand_icon_light: "https://i.ibb.co/fXDQGyt/Loading-Article.gif",
            identifier: "recYKSK5MVLWfsVyX",
            ad1_description: "Revolutionary Age-Defying Solution Found!",
            ad2_description: null,
            page1_type: "Advertorial",
            page2_type: "Squeeze"
          },
          editable: "true",
          adId: 9
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "edit.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "brandName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editAdBody1.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.adBody1 || $queries.query?.data[0]?.ad_body_1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "adBody1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editAdBody2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.adBody2 || $queries.query?.data[0]?.ad_body_2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editAdBody3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.adBody3 || $queries.query?.data[0]?.ad_body_3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editAdBody4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.adBody4 || $queries.query?.data[0]?.ad_body_4;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editAdCreative.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.adCreative || $queries.query?.data[0]?.ad_creative;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editAdHeadline.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.adHeadline || $queries.query?.data[0]?.ad_headline;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editAdDescription.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.adDescription || $queries.query?.data[0]?.ad_description
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adBody2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adBody3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adBody4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adCreative",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adHeadline",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "adDescription",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
        opId: "2669b9c9-10a9-4e5a-970d-2e4113e1b2c0",
        userArgs: {
          filters: [$ctx.params.slug]
        },
        cacheKey: `plasmic.$.2669b9c9-10a9-4e5a-970d-2e4113e1b2c0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuDnw8Kkoe0Y9()
  });

  return (
    <div
      data-plasmic-name={"ad"}
      data-plasmic-override={overrides.ad}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.ad
      )}
    >
      <div
        data-plasmic-name={"brand"}
        data-plasmic-override={overrides.brand}
        className={classNames(projectcss.all, sty.brand)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__ctQx)}
          displayHeight={"2rem"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "2rem" : "2rem"
          }
          loading={"lazy"}
          src={(() => {
            try {
              return $props.currentModel.data[0].brand_icon_light;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  src: "/plasmic/production_presell_app_without_auth/images/presellSocialIconpng.png",
                  fullWidth: 250,
                  fullHeight: 250,
                  aspectRatio: undefined
                };
              }
              throw e;
            }
          })()}
        />

        <Editable
          className={classNames("__wab_instance", sty.editable__qRmon)}
          edit2={
            <TextInput
              data-plasmic-name={"edit"}
              data-plasmic-override={overrides.edit}
              className={classNames("__wab_instance", sty.edit)}
              endIcon={null}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["edit", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              startIcon={null}
              value={generateStateValueProp($state, ["edit", "value"]) ?? ""}
            />
          }
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rpX3Y
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props?.currentModel?.brand_name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Blank";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Editable>
      </div>
      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(projectcss.all, sty.body)}
      >
        <Editable
          className={classNames("__wab_instance", sty.editable__himBp)}
          edit2={
            <TextInput
              data-plasmic-name={"editAdBody1"}
              data-plasmic-override={overrides.editAdBody1}
              className={classNames("__wab_instance", sty.editAdBody1)}
              endIcon={null}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["editAdBody1", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};

                  $steps["updateAdBody1"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["adBody1"]
                          },
                          operation: 0,
                          value: $state.editAdBody1.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAdBody1"] != null &&
                    typeof $steps["updateAdBody1"] === "object" &&
                    typeof $steps["updateAdBody1"].then === "function"
                  ) {
                    $steps["updateAdBody1"] = await $steps["updateAdBody1"];
                  }

                  $steps["postgresUpdateById"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                            opId: "c573bef9-d80a-4035-a07b-63a808eee3fc",
                            userArgs: {
                              keys: [$props.adId],
                              variables: [$state.editAdBody1.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresUpdateById"] != null &&
                    typeof $steps["postgresUpdateById"] === "object" &&
                    typeof $steps["postgresUpdateById"].then === "function"
                  ) {
                    $steps["postgresUpdateById"] = await $steps[
                      "postgresUpdateById"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              startIcon={null}
              value={
                generateStateValueProp($state, ["editAdBody1", "value"]) ?? ""
              }
            />
          }
          editEnabled={(() => {
            try {
              return $props.editable == "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pOl7B
            )}
          >
            <React.Fragment>
              {$state.adBody1 || $queries.query?.data[0]?.ad_body_1
                ? $queries.query.data[0].ad_body_1
                : ""}
            </React.Fragment>
          </div>
        </Editable>
        <Editable
          className={classNames("__wab_instance", sty.editable__bOz)}
          edit2={
            <TextInput
              data-plasmic-name={"editAdBody2"}
              data-plasmic-override={overrides.editAdBody2}
              className={classNames("__wab_instance", sty.editAdBody2)}
              endIcon={null}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["editAdBody2", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};

                  $steps["updateAdBody2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["adBody2"]
                          },
                          operation: 0,
                          value: $state.editAdBody2.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAdBody2"] != null &&
                    typeof $steps["updateAdBody2"] === "object" &&
                    typeof $steps["updateAdBody2"].then === "function"
                  ) {
                    $steps["updateAdBody2"] = await $steps["updateAdBody2"];
                  }

                  $steps["postgresUpdateById"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                            opId: "7cc59366-e855-42fd-8897-a77af05ffaf0",
                            userArgs: {
                              variables: [$state.editAdBody2.value],
                              keys: [$props.adId]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresUpdateById"] != null &&
                    typeof $steps["postgresUpdateById"] === "object" &&
                    typeof $steps["postgresUpdateById"].then === "function"
                  ) {
                    $steps["postgresUpdateById"] = await $steps[
                      "postgresUpdateById"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              startIcon={null}
              value={
                generateStateValueProp($state, ["editAdBody2", "value"]) ?? ""
              }
            />
          }
          editEnabled={(() => {
            try {
              return $props.editable == "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qKjP3
            )}
          >
            <React.Fragment>
              {$state.adBody2 || $queries?.query?.data[0]?.ad_body_2
                ? $queries.query.data[0].ad_body_2
                : ""}
            </React.Fragment>
          </div>
        </Editable>
        <Editable
          className={classNames("__wab_instance", sty.editable__vg5Gl)}
          edit2={
            <TextInput
              data-plasmic-name={"editAdBody3"}
              data-plasmic-override={overrides.editAdBody3}
              className={classNames("__wab_instance", sty.editAdBody3)}
              endIcon={null}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["editAdBody3", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};

                  $steps["updateAdBody3"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["adBody3"]
                          },
                          operation: 0,
                          value: $state.editAdBody3.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAdBody3"] != null &&
                    typeof $steps["updateAdBody3"] === "object" &&
                    typeof $steps["updateAdBody3"].then === "function"
                  ) {
                    $steps["updateAdBody3"] = await $steps["updateAdBody3"];
                  }

                  $steps["postgresUpdateById"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                            opId: "5a8fbf42-2848-463b-9102-d1bad55b453a",
                            userArgs: {
                              keys: [$props.adId],
                              variables: [$state.editAdBody3.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresUpdateById"] != null &&
                    typeof $steps["postgresUpdateById"] === "object" &&
                    typeof $steps["postgresUpdateById"].then === "function"
                  ) {
                    $steps["postgresUpdateById"] = await $steps[
                      "postgresUpdateById"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              startIcon={null}
              value={
                generateStateValueProp($state, ["editAdBody3", "value"]) ?? ""
              }
            />
          }
          editEnabled={(() => {
            try {
              return $props.editable == "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yxkcM
            )}
          >
            <React.Fragment>
              {$state.adBody3 || $queries?.query?.data[0]?.ad_body_3
                ? $queries.query.data[0].ad_body_3
                : ""}
            </React.Fragment>
          </div>
        </Editable>
        <Editable
          className={classNames("__wab_instance", sty.editable__jJ6At)}
          edit2={
            <TextInput
              data-plasmic-name={"editAdBody4"}
              data-plasmic-override={overrides.editAdBody4}
              className={classNames("__wab_instance", sty.editAdBody4)}
              endIcon={null}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["editAdBody4", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};

                  $steps["updateAdBody4"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["adBody4"]
                          },
                          operation: 0,
                          value: $state.editAdBody4.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAdBody4"] != null &&
                    typeof $steps["updateAdBody4"] === "object" &&
                    typeof $steps["updateAdBody4"].then === "function"
                  ) {
                    $steps["updateAdBody4"] = await $steps["updateAdBody4"];
                  }

                  $steps["postgresUpdateById"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                            opId: "699b237d-3322-4d21-a18b-fcf6648808d8",
                            userArgs: {
                              keys: [$props.adId],
                              variables: [$state.editAdBody4.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresUpdateById"] != null &&
                    typeof $steps["postgresUpdateById"] === "object" &&
                    typeof $steps["postgresUpdateById"].then === "function"
                  ) {
                    $steps["postgresUpdateById"] = await $steps[
                      "postgresUpdateById"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              startIcon={null}
              value={
                generateStateValueProp($state, ["editAdBody4", "value"]) ?? ""
              }
            />
          }
          editEnabled={(() => {
            try {
              return $props.editable == "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2Grfc
            )}
          >
            <React.Fragment>
              {$state.adBody4 || $queries?.query?.data[0]?.ad_body_4
                ? $queries.query.data[0].ad_body_4
                : ""}
            </React.Fragment>
          </div>
        </Editable>
      </div>
      <Editable
        className={classNames("__wab_instance", sty.editable__gUhsw)}
        edit2={
          <TextInput
            data-plasmic-name={"editAdCreative"}
            data-plasmic-override={overrides.editAdCreative}
            className={classNames("__wab_instance", sty.editAdCreative)}
            endIcon={null}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["editAdCreative", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              (async event => {
                const $steps = {};

                $steps["updateAdCreative"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["adCreative"]
                        },
                        operation: 0,
                        value: $state.editAdCreative.value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateAdCreative"] != null &&
                  typeof $steps["updateAdCreative"] === "object" &&
                  typeof $steps["updateAdCreative"].then === "function"
                ) {
                  $steps["updateAdCreative"] = await $steps["updateAdCreative"];
                }

                $steps["postgresUpdateById"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                          opId: "c732a72e-dceb-4db2-92e0-0c311986dcc8",
                          userArgs: {
                            keys: [$props.adId],
                            variables: [$state.editAdCreative.value]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["postgresUpdateById"] != null &&
                  typeof $steps["postgresUpdateById"] === "object" &&
                  typeof $steps["postgresUpdateById"].then === "function"
                ) {
                  $steps["postgresUpdateById"] = await $steps[
                    "postgresUpdateById"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            startIcon={null}
            value={
              generateStateValueProp($state, ["editAdCreative", "value"]) ?? ""
            }
          />
        }
        editEnabled={(() => {
          try {
            return $props.editable == "true";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
      >
        <PlasmicImg__
          data-plasmic-name={"creative"}
          data-plasmic-override={overrides.creative}
          alt={""}
          className={classNames(sty.creative)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "100%"
          }
          loading={"lazy"}
          src={
            $state.adCreative || $queries?.query?.data[0]?.ad_creative
              ? $queries.query.data[0].ad_creative
              : ""
          }
        />
      </Editable>
      <div className={classNames(projectcss.all, sty.freeBox__ziWpm)}>
        <Editable
          className={classNames("__wab_instance", sty.editable__sBzlm)}
          edit2={
            <TextInput
              data-plasmic-name={"editAdHeadline"}
              data-plasmic-override={overrides.editAdHeadline}
              className={classNames("__wab_instance", sty.editAdHeadline)}
              endIcon={null}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "editAdHeadline",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};

                  $steps["updateAdHeadline"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["adHeadline"]
                          },
                          operation: 0,
                          value: $state.editAdHeadline.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAdHeadline"] != null &&
                    typeof $steps["updateAdHeadline"] === "object" &&
                    typeof $steps["updateAdHeadline"].then === "function"
                  ) {
                    $steps["updateAdHeadline"] = await $steps[
                      "updateAdHeadline"
                    ];
                  }

                  $steps["postgresUpdateById"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                            opId: "afa2a685-b33d-4130-b559-9958db4a4ce9",
                            userArgs: {
                              keys: [$props.adId],
                              variables: [$state.editAdHeadline.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresUpdateById"] != null &&
                    typeof $steps["postgresUpdateById"] === "object" &&
                    typeof $steps["postgresUpdateById"].then === "function"
                  ) {
                    $steps["postgresUpdateById"] = await $steps[
                      "postgresUpdateById"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              startIcon={null}
              value={
                generateStateValueProp($state, ["editAdHeadline", "value"]) ??
                ""
              }
            />
          }
          editEnabled={(() => {
            try {
              return $props.editable == "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oMuZm
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.adHeadline ||
                    $queries?.query?.data[0]?.ad_headline
                    ? $queries?.query?.data[0]?.ad_headline
                    : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Editable>
        <Editable
          className={classNames("__wab_instance", sty.editable__meoLz)}
          edit2={
            <TextInput
              data-plasmic-name={"editAdDescription"}
              data-plasmic-override={overrides.editAdDescription}
              className={classNames("__wab_instance", sty.editAdDescription)}
              endIcon={null}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "editAdDescription",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};

                  $steps["updateAdDescription"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["adDescription"]
                          },
                          operation: 0,
                          value: $state.editAdDescription.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAdDescription"] != null &&
                    typeof $steps["updateAdDescription"] === "object" &&
                    typeof $steps["updateAdDescription"].then === "function"
                  ) {
                    $steps["updateAdDescription"] = await $steps[
                      "updateAdDescription"
                    ];
                  }

                  $steps["postgresUpdateById"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                            opId: "e53cb16d-8dfb-4c7a-984f-c0cde9cc4e01",
                            userArgs: {
                              keys: [$props.adId],
                              variables: [$state.editAdDescription.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["postgresUpdateById"] != null &&
                    typeof $steps["postgresUpdateById"] === "object" &&
                    typeof $steps["postgresUpdateById"].then === "function"
                  ) {
                    $steps["postgresUpdateById"] = await $steps[
                      "postgresUpdateById"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              startIcon={null}
              value={
                generateStateValueProp($state, [
                  "editAdDescription",
                  "value"
                ]) ?? ""
              }
            />
          }
          editEnabled={(() => {
            try {
              return $props.editable == "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sJxF
            )}
          >
            <React.Fragment>
              {$state.adDescription || $queries.query?.data[0]?.ad_description
                ? $queries.query?.data[0]?.ad_description
                : ""}
            </React.Fragment>
          </div>
        </Editable>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__pYb8V)}>
        <LearnMoreButton
          data-plasmic-name={"learnMoreButton"}
          data-plasmic-override={overrides.learnMoreButton}
          className={classNames("__wab_instance", sty.learnMoreButton)}
        />

        {(() => {
          try {
            return $props.editable == "false";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <AntdButton
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            onClick={async () => {
              const $steps = {};

              $steps["runOnEdit"] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: $props["onEdit"],
                      args: [
                        (() => {
                          try {
                            return $props.adId;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runOnEdit"] != null &&
                typeof $steps["runOnEdit"] === "object" &&
                typeof $steps["runOnEdit"].then === "function"
              ) {
                $steps["runOnEdit"] = await $steps["runOnEdit"];
              }
            }}
            shape={"circle"}
            size={"small"}
            type={"link"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__anlMh)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"50px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/production_presell_app_without_auth/images/magicEditBtNsvg.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          </AntdButton>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ad: [
    "ad",
    "brand",
    "edit",
    "body",
    "editAdBody1",
    "editAdBody2",
    "editAdBody3",
    "editAdBody4",
    "creative",
    "editAdCreative",
    "editAdHeadline",
    "editAdDescription",
    "learnMoreButton",
    "button"
  ],
  brand: ["brand", "edit"],
  edit: ["edit"],
  body: ["body", "editAdBody1", "editAdBody2", "editAdBody3", "editAdBody4"],
  editAdBody1: ["editAdBody1"],
  editAdBody2: ["editAdBody2"],
  editAdBody3: ["editAdBody3"],
  editAdBody4: ["editAdBody4"],
  creative: ["creative"],
  editAdCreative: ["editAdCreative"],
  editAdHeadline: ["editAdHeadline"],
  editAdDescription: ["editAdDescription"],
  learnMoreButton: ["learnMoreButton"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ad: "div";
  brand: "div";
  edit: typeof TextInput;
  body: "div";
  editAdBody1: typeof TextInput;
  editAdBody2: typeof TextInput;
  editAdBody3: typeof TextInput;
  editAdBody4: typeof TextInput;
  creative: typeof PlasmicImg__;
  editAdCreative: typeof TextInput;
  editAdHeadline: typeof TextInput;
  editAdDescription: typeof TextInput;
  learnMoreButton: typeof LearnMoreButton;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAd__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAd__VariantsArgs;
    args?: PlasmicAd__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAd__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAd__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAd__ArgProps,
          internalVariantPropNames: PlasmicAd__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAd__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ad") {
    func.displayName = "PlasmicAd";
  } else {
    func.displayName = `PlasmicAd.${nodeName}`;
  }
  return func;
}

export const PlasmicAd = Object.assign(
  // Top-level PlasmicAd renders the root element
  makeNodeComponent("ad"),
  {
    // Helper components rendering sub-elements
    brand: makeNodeComponent("brand"),
    edit: makeNodeComponent("edit"),
    body: makeNodeComponent("body"),
    editAdBody1: makeNodeComponent("editAdBody1"),
    editAdBody2: makeNodeComponent("editAdBody2"),
    editAdBody3: makeNodeComponent("editAdBody3"),
    editAdBody4: makeNodeComponent("editAdBody4"),
    creative: makeNodeComponent("creative"),
    editAdCreative: makeNodeComponent("editAdCreative"),
    editAdHeadline: makeNodeComponent("editAdHeadline"),
    editAdDescription: makeNodeComponent("editAdDescription"),
    learnMoreButton: makeNodeComponent("learnMoreButton"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAd
    internalVariantProps: PlasmicAd__VariantProps,
    internalArgProps: PlasmicAd__ArgProps
  }
);

export default PlasmicAd;
/* prettier-ignore-end */
