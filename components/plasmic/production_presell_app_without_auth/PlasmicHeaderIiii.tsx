// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9KtuS1ThjHB8cDkxUpF5Nn
// Component: 6kvgrsqICpHb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TokensRemaining from "../../TokensRemaining"; // plasmic-import: Ui49-IDzPUFa/component

import { useScreenVariants as useScreenVariantsuDnw8Kkoe0Y9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uDnw8KKOE0Y9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic_production_presell_app_without_auth.module.css"; // plasmic-import: 9KtuS1ThjHB8cDkxUpF5Nn/projectcss
import sty from "./PlasmicHeaderIiii.module.css"; // plasmic-import: 6kvgrsqICpHb/css

createPlasmicElementProxy;

export type PlasmicHeaderIiii__VariantMembers = {};
export type PlasmicHeaderIiii__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderIiii__VariantsArgs;
export const PlasmicHeaderIiii__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderIiii__ArgsType = {};
type ArgPropType = keyof PlasmicHeaderIiii__ArgsType;
export const PlasmicHeaderIiii__ArgProps = new Array<ArgPropType>();

export type PlasmicHeaderIiii__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultHeaderIiiiProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeaderIiii__RenderFunc(props: {
  variants: PlasmicHeaderIiii__VariantsArgs;
  args: PlasmicHeaderIiii__ArgsType;
  overrides: PlasmicHeaderIiii__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuDnw8Kkoe0Y9()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vVw4)}>
        <div className={classNames(projectcss.all, sty.freeBox__qlJgc)}>
          <div className={classNames(projectcss.all, sty.freeBox__a1P1)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__jLauq)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "35px"
                  : "35px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/production_presell_app_without_auth/images/backButtonsvg.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__ziWy2)}>
          <div className={classNames(projectcss.all, sty.freeBox__lnr3)}>
            <TokensRemaining
              className={classNames(
                "__wab_instance",
                sty.tokensRemaining___2X5JH
              )}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__veqOi)}>
          <div
            className={classNames(projectcss.all, sty.freeBox__uHq4V)}
            onClick={async event => {
              const $steps = {};

              $steps["updateVariable"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["variable"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateVariable"] != null &&
                typeof $steps["updateVariable"] === "object" &&
                typeof $steps["updateVariable"].then === "function"
              ) {
                $steps["updateVariable"] = await $steps["updateVariable"];
              }
            }}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___2FQci)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "35px"
                  : "35px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/production_presell_app_without_auth/images/refreshButtonsvg.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__ur3To)}>
        <TokensRemaining
          className={classNames("__wab_instance", sty.tokensRemaining__aulUq)}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderIiii__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderIiii__VariantsArgs;
    args?: PlasmicHeaderIiii__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderIiii__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeaderIiii__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderIiii__ArgProps,
          internalVariantPropNames: PlasmicHeaderIiii__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderIiii__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderIiii";
  } else {
    func.displayName = `PlasmicHeaderIiii.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderIiii = Object.assign(
  // Top-level PlasmicHeaderIiii renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHeaderIiii
    internalVariantProps: PlasmicHeaderIiii__VariantProps,
    internalArgProps: PlasmicHeaderIiii__ArgProps
  }
);

export default PlasmicHeaderIiii;
/* prettier-ignore-end */
